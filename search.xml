<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>100个python库推荐</title>
      <link href="/2025/03/19/100%E4%B8%AApython%E5%BA%93%E6%8E%A8%E8%8D%90/"/>
      <url>/2025/03/19/100%E4%B8%AApython%E5%BA%93%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>序号 库名 作用 应用场景<br>1 NumPy 高性能多维数组和数学运算 数据分析、科学计算、矩阵运算<br>2 Pandas 数据操作和分析，支持数据帧处理 数据清洗、探索、时间序列分析<br>3 Scikit-learn 机器学习工具，支持分类、回归、聚类 预测建模、数据分类、特征工程<br>4 TensorFlow 深度学习框架，支持神经网络训练 图像识别、NLP、AI 研究<br>5 PyTorch 动态计算图的深度学习框架 学术研究、神经网络开发、原型设计<br>6 Matplotlib 2D 数据可视化工具 科学绘图、数据报告、统计分析<br>7 Flask 轻量级 Web 框架 RESTful API、小型 Web 应用<br>8 Django 功能强大的 Web 框架 企业级 Web 应用、CMS 开发<br>9 Requests 简化的 HTTP 请求库 API 调用、网页数据抓取<br>10 BeautifulSoup HTML&#x2F;XML 解析库 网页内容提取、数据爬取<br>11 SQLAlchemy ORM 和 SQL 工具包 数据库操作、Web 后端开发<br>12 asyncio 异步 I&#x2F;O 框架 高并发网络应用、异步编程<br>13 PyTest 单元测试框架 代码测试、质量保证<br>14 Logging 日志记录工具 应用调试、运行状态监控<br>15 Seaborn 基于 Matplotlib 的高级统计可视化 数据探索、统计图表、美观展示<br>16 SciPy 科学计算工具（优化、积分等） 工程计算、物理仿真、信号处理<br>17 FastAPI 现代高性能 Web 框架，支持异步 高性能 API、微服务开发<br>18 Scrapy 强大的爬虫框架 大规模网站爬取、数据采集<br>19 Selenium 浏览器自动化工具 Web 测试、动态网页抓取<br>20 Pillow 图像处理库 图像编辑、批量处理<br>21 OpenCV 计算机视觉库 图像识别、视频分析、实时处理<br>22 Keras 高层次神经网络 API 快速原型设计、深度学习模型<br>23 NLTK 自然语言处理工具 文本分析、分词、情感分析<br>24 SpaCy 高效 NLP 库 实体识别、句法分析<br>25 Transformers 预训练 NLP 模型库 文本生成、翻译、问答系统<br>26 Celery 分布式任务队列 后台任务处理、定时任务<br>27 aiohttp 异步 HTTP 客户端&#x2F;服务器 异步 API 调用、高性能 Web 服务<br>28 PyInstaller 打包 Python 脚本为可执行文件 桌面应用分发、跨平台部署<br>29 Argparse 命令行参数解析 脚本开发、命令行工具<br>30 Click 高级命令行界面工具 交互式 CLI 工具开发<br>31 Psycopg2 PostgreSQL 数据库适配器 PostgreSQL 操作<br>32 PyMySQL MySQL 数据库连接库 MySQL 操作<br>33 Redis-py Redis 客户端库 缓存管理、实时应用<br>34 Jupyter 交互式笔记本环境 数据分析、教学、原型开发<br>35 Plotly 交互式图表库 数据报告、科学可视化<br>36 Bokeh 交互式 Web 可视化 数据可视化、动态图表<br>37 Dash 数据可视化 Web 框架 交互式仪表盘开发<br>38 PyQt 跨平台 GUI 框架 复杂桌面应用开发<br>39 Tkinter 内置 GUI 工具包 简单桌面应用界面<br>40 Pygame 2D 游戏开发库 游戏原型、教育项目<br>41 Paramiko SSH 协议库 服务器自动化、文件传输<br>42 Cryptography 加密和安全通信工具 数据加密、安全协议实现<br>43 Joblib 并行计算和模型持久化 模型保存、大规模计算<br>44 Dask 并行计算和大数据处理 大规模数据分析、分布式计算<br>45 PySpark Spark 的 Python 接口 大数据分析、分布式 ML<br>46 Unittest 内置单元测试框架 模块测试、功能验证<br>47 Mock 模拟测试工具 测试隔离、模拟外部服务<br>48 PyPDF2 PDF 文件操作 PDF 提取、合并、编辑<br>49 XlsxWriter Excel 文件生成和编辑 报表生成、数据导出<br>50 Twisted 事件驱动网络编程框架 网络服务器、协议实现<br>51 Gevent 协程网络库 高并发网络应用<br>52 Pydantic 数据验证和设置管理 API 开发、配置管理<br>53 HTTPie 命令行 HTTP 客户端 API 测试、调试<br>54 Websockets WebSocket 协议实现 实时通信应用<br>55 Gunicorn WSGI HTTP 服务器 Web 应用部署<br>56 Uvicorn ASGI 服务器 FastAPI&#x2F;Django 异步部署<br>57 Starlette 轻量级 ASGI 框架 构建异步 Web 应用<br>58 Bottle 微型 Web 框架 小型 Web 应用、原型开发<br>59 Tornado 异步 Web 框架 高并发 Web 服务<br>60 Jinja2 模板引擎 Web 页面渲染<br>61 PyMongo MongoDB 客户端 NoSQL 数据库操作<br>62 SQLObject 轻量级 ORM 工具 数据库操作<br>63 PyArrow Apache Arrow 的 Python 绑定 大数据处理、跨语言数据交换<br>64 Polars 高性能数据帧库 大规模数据分析<br>65 Statsmodels 统计建模和分析 统计分析、时间序列建模<br>66 SymPy 符号数学库 数学计算、公式推导<br>67 NetworkX 网络分析和图算法 社交网络分析、图计算<br>68 PyTorch Lightning PyTorch 的高级封装 深度学习研究、模型训练<br>69 XGBoost 梯度提升机器学习库 竞赛建模、预测任务<br>70 LightGBM 高效梯度提升框架 大数据集机器学习<br>71 CatBoost 支持分类特征的梯度提升 机器学习任务<br>72 Gensim 主题建模和文档相似性分析 文本挖掘、语义分析<br>73 TextBlob 简化文本处理和 NLP 情感分析、文本分类<br>74 PyTorch Geometric 图神经网络库 图数据分析、推荐系统<br>75 Ray 分布式计算框架 并行任务、强化学习<br>76 Pendulum 日期时间处理库 时间操作、时区管理<br>77 Arrow 日期时间操作工具 时间格式化、计算<br>78 Schedule 轻量级定时任务库 简单定时任务<br>79 APScheduler 高级任务调度 复杂定时任务<br>80 Pyvisa 仪器控制库 实验室自动化、硬件控制<br>81 Pyserial 串口通信库 硬件通信、嵌入式开发<br>82 PyUSB USB 设备控制 硬件交互、设备开发<br>83 PyBluez Bluetooth 通信库 蓝牙设备开发<br>84 ReportLab PDF 生成工具 动态 PDF 报表<br>85 Pdfplumber PDF 内容提取 PDF 解析、数据提取<br>86 Openpyxl Excel 文件读写 Excel 操作、数据处理<br>87 Tabulate 美化表格输出 数据展示、命令行工具<br>88 Rich 终端美化库 漂亮的 CLI 输出<br>89 Typer 现代 CLI 框架 命令行工具开发<br>90 Fire 自动生成 CLI 快速脚本转 CLI<br>91 Pathlib 路径操作工具 文件系统操作<br>92 Shutil 文件操作工具 文件复制、移动、删除<br>93 Glob 文件路径匹配 文件搜索、批量处理<br>94 Tempfile 临时文件和目录管理 临时数据存储<br>95 Contextlib 上下文管理工具 资源管理、简化代码<br>96 Itertools 高效迭代工具 数据处理、组合生成<br>97 Collections 高级数据结构 计数器、双端队列等<br>98 Functools 高阶函数和工具 函数式编程、缓存<br>99 Operator 操作符函数 简化代码、函数式编程<br>100 Bisect 二分查找算法 有序列表操作</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用ffmpeg把MP4转成wav</title>
      <link href="/2025/03/19/MP4%E8%BD%ACwav/"/>
      <url>/2025/03/19/MP4%E8%BD%ACwav/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i /Download/ScreenRecording_03-19-2025 15-39-36_1.MP4&#x27; -vn -acodec pcm_s16le -ar 44100 -ac 1 /Desktop/jia_converted.wav</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>autossh介绍</title>
      <link href="/2025/03/14/AutoSSH/"/>
      <url>/2025/03/14/AutoSSH/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Autossh？"><a href="#什么是-Autossh？" class="headerlink" title="什么是 Autossh？"></a>什么是 Autossh？</h2><p><code>autossh</code> 是一个增强版的 SSH 工具，用于自动监控和重启 SSH 隧道。如果网络不稳定或连接断开，<code>autossh</code> 会尝试重新建立连接，非常适合需要持久隧道的场景，比如你的 Open WebUI 和 Ollama 服务。</p><hr><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ol><li><p><strong>安装 Autossh</strong>：</p><ul><li>macOS：<code>brew install autossh</code>（需先安装 Homebrew）。</li><li>Ubuntu&#x2F;Debian：<code>sudo apt-get install autossh</code>。</li><li>CentOS&#x2F;RHEL：<code>sudo yum install autossh</code>。</li></ul></li><li><p><strong>SSH 密钥认证</strong>：</p><ul><li><code>autossh</code> 需要无密码登录，因为它无法交互输入密码。</li><li>在旧电脑上生成密钥对：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096</span><br></pre></td></tr></table></figure>回车接受默认路径（<code>~/.ssh/id_rsa</code>），无需设置密码。</li><li>将公钥添加到云服务器：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id root@yukun.xin</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>测试普通 SSH</strong>：</p><ul><li>先用普通 <code>ssh</code> 测试，确保连接正常。例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -R 0.0.0.0:3000:localhost:3000 root@yukun.xin</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="使用-Autossh-的步骤"><a href="#使用-Autossh-的步骤" class="headerlink" title="使用 Autossh 的步骤"></a>使用 Autossh 的步骤</h2><h3 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h3><p><code>autossh</code> 的命令与 <code>ssh</code> 类似，只需将 <code>ssh</code> 替换为 <code>autossh</code>，并添加一些参数。</p><ul><li><strong>示例</strong>（单端口反向转发）：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autossh -M 0 -f -N -R 0.0.0.0:3000:localhost:3000 root@yukun.xin</span><br></pre></td></tr></table></figure><ul><li><code>-M 0</code>：禁用监控端口（推荐使用 <code>ServerAlive</code> 替代，见下文）。</li><li><code>-f</code>：后台运行。</li><li><code>-N</code>：不执行远程命令，仅转发端口。</li><li><code>-R 0.0.0.0:3000:localhost:3000</code>：反向转发，将云服务器的 <code>3000</code> 端口映射到旧电脑的 <code>localhost:3000</code>。</li></ul></li></ul><h3 id="2-多端口转发"><a href="#2-多端口转发" class="headerlink" title="2. 多端口转发"></a>2. 多端口转发</h3><p>你需要同时映射 Open WebUI（<code>3000</code>）和 Ollama（<code>11434</code>）。命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autossh -M 0 -f -N -R 0.0.0.0:3000:localhost:3000 -R 0.0.0.0:11434:localhost:11434 root@yukun.xin</span><br></pre></td></tr></table></figure><ul><li>这会将云服务器的 <code>3000</code> 和 <code>11434</code> 端口分别映射到旧电脑的对应端口。</li></ul><h3 id="3-增强稳定性"><a href="#3-增强稳定性" class="headerlink" title="3. 增强稳定性"></a>3. 增强稳定性</h3><p>添加 <code>ServerAlive</code> 参数，确保检测连接状态并自动重连：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autossh -M 0 -f -N -o &quot;ServerAliveInterval 30&quot; -o &quot;ServerAliveCountMax 3&quot; -R 0.0.0.0:3000:localhost:3000 -R 0.0.0.0:11434:localhost:11434 root@yukun.xin</span><br></pre></td></tr></table></figure><ul><li><code>ServerAliveInterval 30</code>：每 30 秒发送一次保活信号。</li><li><code>ServerAliveCountMax 3</code>：连续 3 次未收到响应则认为连接断开，触发重连。</li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ssh反向隧道进行内网穿透</title>
      <link href="/2025/03/14/%E4%BD%BF%E7%94%A8ssh%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%88%E5%AE%9E%E4%BE%8B%EF%BC%9Aopen%20webUI%EF%BC%89/"/>
      <url>/2025/03/14/%E4%BD%BF%E7%94%A8ssh%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%88%E5%AE%9E%E4%BE%8B%EF%BC%9Aopen%20webUI%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>既然我们已经有了一个云服务器，那么我们能否把它当成一个跳板，访问云服务器的某个端口时“反向代理”到另一个内网设备上部署的东西呢?</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>一台本地电脑</p><p><img src="http://kunrea.top/blog/20250314114456625.png"></p><p>一台云服务器</p><p><img src="http://kunrea.top/blog/20250314114330671.png"></p><span id="more"></span><h4 id="反向隧道"><a href="#反向隧道" class="headerlink" title="反向隧道"></a>反向隧道</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh -R 0.0.0.0:3000:localhost:3000 -R 0.0.0.0:11434:localhost:11434 -N root@xxxxx.xxx</span></span><br></pre></td></tr></table></figure><p>相关参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh -R [remote_port]:[bind_address]:[local_port] user@remotehost</span><br><span class="line"> remote_port：远程服务器上将要监听的端口号。</span><br><span class="line"> bind_address：本地机器上的IP地址，默认为localhost，表示只允许来自本地的连接。如果设置为0.0.0.0，则允许所有来源的连接。</span><br><span class="line"> local_port：本地机器上的端口号，数据包会被转发到这里。</span><br><span class="line">-N 的作用：不执行远程命令</span><br><span class="line">-f 表示后台运行</span><br></pre></td></tr></table></figure><p>但是会发现外网访问不了，是因为绑定到了 127.0.0.1 上，只有本机可以访问，我们得把他绑定到 0.0.0.0:port 上，才能让外网访问。</p><p>打开云服务器上的 <code>~/.ssh/sshd_config</code>或者<code>/etc/ssh/sshd_config</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改</span></span><br><span class="line">GatewayPorts yes</span><br></pre></td></tr></table></figure><p><img src="http://kunrea.top/blog/20250314134454698.png"></p><p>然后重启 ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart ssh</span><br></pre></td></tr></table></figure><p>重新建立反向隧道即可</p><h4 id="autossh-使用"><a href="#autossh-使用" class="headerlink" title="autossh 使用"></a>autossh 使用</h4><p>autossh 是一个增强版的 SSH 工具，用于自动监控和重启 SSH 隧道。如果网络不稳定或连接断开，autossh 会尝试重新建立连接，非常适合需要持久隧道的场景，比如我的 Open WebUI 和 Ollama 服务。</p><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autossh -M 0 -f -N -o &quot;ServerAliveInterval 30&quot; -o &quot;ServerAliveCountMax 3&quot; -R 0.0.0.0:3000:localhost:3000 -R 0.0.0.0:11434:localhost:11434 root@xxxxx.xxx</span><br></pre></td></tr></table></figure><p>具体我另开一篇</p><h4 id="ollama-open-WebUI-部署时外网访问没有模型"><a href="#ollama-open-WebUI-部署时外网访问没有模型" class="headerlink" title="ollama+open WebUI 部署时外网访问没有模型"></a>ollama+open WebUI 部署时外网访问没有模型</h4><p><img src="http://kunrea.top/blog/IMG_9F1A295273B7-1.jpeg"></p><p>这是因为在本地部署时，我们的 ollama 部署在 localhost:11434 端口，然后我们的 openWebUI 是从 11434 中读取模型。</p><p>但是我们的 ssh 反向映射到了 linux 上之后，openWebUI 在云服务器上面访问 localhost:11434,也就是访问我们本地的这个端口，在这个过程里出问题了。</p><p>我们使用<code>lsof -i :11434</code> 发现是<code>localhost:11434</code>或者<code>127.0.0.1:11434</code>也就是说云服务器访问本机的时候失败了。</p><p>我们查看<a href="https://github.com/ollama/ollama/blob/main/docs/faq.md">ollama 文档</a>可以看到设置服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl setenv OLLAMA_HOST &quot;0.0.0.0:11434&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> linux </tag>
            
            <tag> AI </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS显示文件已损坏，但是在隐私设置里没有信任的方法</title>
      <link href="/2025/03/13/macOS%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%EF%BC%8C%E4%BD%86%E6%98%AF%E5%9C%A8%E9%9A%90%E7%A7%81%E8%AE%BE%E7%BD%AE%E9%87%8C%E6%B2%A1%E6%9C%89%E4%BF%A1%E4%BB%BB%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2025/03/13/macOS%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%EF%BC%8C%E4%BD%86%E6%98%AF%E5%9C%A8%E9%9A%90%E7%A7%81%E8%AE%BE%E7%BD%AE%E9%87%8C%E6%B2%A1%E6%9C%89%E4%BF%A1%E4%BB%BB%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>很多时候 macOS 从网上下载的应用打开时会显示</p><p><img src="http://kunrea.top/blog/20250313100802013.png"></p><p>这是因为在 macos 的<code>允许以下来源的应用程序</code>设置的原因</p><p><img src="http://kunrea.top/blog/20250313101028879.png"></p><p>我们可以使用以下命令</p><p><code>sudo spctl --master-disable </code></p><p>随后在这设置<code>所有来源</code></p><p><strong>但是，更新之后可能会显示</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> spctl --master-disable</span></span><br><span class="line">Password: Globally disabling the assessment system needs to be confirmed in System Settings.</span><br></pre></td></tr></table></figure><p>我们可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> xattr -r -d com.apple.quarantine 应用路径</span></span><br></pre></td></tr></table></figure><p>就可以使用了</p>]]></content>
      
      
      <categories>
          
          <category> MAC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>超好用的工具Picgo配合Github白嫖图床</title>
      <link href="/2025/03/13/%E4%BD%BF%E7%94%A8picgo%E7%94%A8github%E9%83%A8%E7%BD%B2%E5%9B%BE%E5%BA%8A/"/>
      <url>/2025/03/13/%E4%BD%BF%E7%94%A8picgo%E7%94%A8github%E9%83%A8%E7%BD%B2%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>无论是写博客还是开发一些东西，图片的存储都是一个小问题。<br>本地存储+相对路径是一个方法，但是部署到服务器上的存储空间占用大大增加，尤其是要迁移文件时，如果相对路径没弄好，就清一色的 🙅 了<br><img src="http://kunrea.top/blog/20250313102837699.png"><br>所以使用一个远程图床就很有必要了<br>现在比如阿里云 oss、腾讯云 cos、七牛云、又拍云。<br>但是这些国内平台对图片内容审查比较严格，容易图片丢失，所以我们还是推荐使用 github.</p><h4 id="1-PicGo-安装"><a href="#1-PicGo-安装" class="headerlink" title="1.PicGo 安装"></a>1.PicGo 安装</h4><p><a href="https://github.com/Molunerfinn/PicGo">PicGo</a>是一个<strong>一个用于快速上传图片并获取图片 URL 链接的工具</strong>，目前有 windows 和 macOS 版本。</p><span id="more"></span><p>支持下列图床（2025.3.13）</p><ul><li><code>七牛图床</code> v1.0</li><li><code>腾讯云 COS v4\v5 版本</code> v1.1 &amp; v1.5.0</li><li><code>又拍云</code> v1.2.0</li><li><code>GitHub</code> v1.5.0</li><li><code>SM.MS V2</code> v2.3.0-beta.0</li><li><code>阿里云 OSS</code> v1.6.0</li><li><code>Imgur</code></li></ul><p>macOS 使用 homebrew 安装 picgo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install picgo --cask</span><br></pre></td></tr></table></figure><p>安装后打开</p><p><img src="http://kunrea.top/blog/20250313103926156.png"></p><p>我们可以在这里设置图床</p><p><img src="http://kunrea.top/blog/20250313104023020.png"></p><p><strong>我觉得最好用的一点是，能直接从剪切板上传，也就是截完图直接上传而不需要在本地创建图片。</strong></p><h4 id="2-Github-token"><a href="#2-Github-token" class="headerlink" title="2.Github token"></a>2.Github token</h4><p><img src="http://kunrea.top/blog/20250313104247571.png"></p><p>首先，我们在 github 上创建一个 public 仓库</p><p><img src="http://kunrea.top/blog/20250313104331409.png"></p><p>然后我们在 settings 里面设置</p><p><img src="http://kunrea.top/blog/20250313104454992.png"></p><p><img src="http://kunrea.top/blog/20250313104515502.png"></p><p>然后我们把 token 填进来就可以使用了</p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
