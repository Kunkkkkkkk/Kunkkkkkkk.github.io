<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用ssh反向隧道进行内网穿透</title>
      <link href="/2025/03/14/%E4%BD%BF%E7%94%A8ssh%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%88%E5%AE%9E%E4%BE%8B%EF%BC%9Aopen%20webUI%EF%BC%89/"/>
      <url>/2025/03/14/%E4%BD%BF%E7%94%A8ssh%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%88%E5%AE%9E%E4%BE%8B%EF%BC%9Aopen%20webUI%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>既然我们已经有了一个云服务器，那么我们能否把它当成一个跳板，访问云服务器的某个端口时“反向代理”到另一个内网设备上部署的东西呢?</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>一台本地电脑</p><p><img src="http://kunrea.top/blog/20250314114456625.png"></p><p>一台云服务器</p><p><img src="http://kunrea.top/blog/20250314114330671.png"></p><span id="more"></span><h4 id="反向隧道"><a href="#反向隧道" class="headerlink" title="反向隧道"></a>反向隧道</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh -R 0.0.0.0:3000:localhost:3000 -R 0.0.0.0:11434:localhost:11434 -N root@xxxxx.xxx</span></span><br></pre></td></tr></table></figure><p>相关参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh -R [remote_port]:[bind_address]:[local_port] user@remotehost</span><br><span class="line"> remote_port：远程服务器上将要监听的端口号。</span><br><span class="line"> bind_address：本地机器上的IP地址，默认为localhost，表示只允许来自本地的连接。如果设置为0.0.0.0，则允许所有来源的连接。</span><br><span class="line"> local_port：本地机器上的端口号，数据包会被转发到这里。</span><br><span class="line">-N 的作用：不执行远程命令</span><br><span class="line">-f 表示后台运行</span><br></pre></td></tr></table></figure><p>但是会发现外网访问不了，是因为绑定到了127.0.0.1上，只有本机可以访问，我们得把他绑定到0.0.0.0:port上，才能让外网访问。</p><p>打开云服务器上的 <code>~/.ssh/sshd_config</code>或者<code>/etc/ssh/sshd_config</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改</span></span><br><span class="line">GatewayPorts yes</span><br></pre></td></tr></table></figure><p><img src="http://kunrea.top/blog/20250314134454698.png"></p><p>然后重启ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart ssh</span><br></pre></td></tr></table></figure><p>重新建立反向隧道即可</p><h4 id="autossh使用"><a href="#autossh使用" class="headerlink" title="autossh使用"></a>autossh使用</h4><p>autossh 是一个增强版的 SSH 工具，用于自动监控和重启 SSH 隧道。如果网络不稳定或连接断开，autossh 会尝试重新建立连接，非常适合需要持久隧道的场景，比如我的 Open WebUI 和 Ollama 服务。</p><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autossh -M 0 -f -N -o &quot;ServerAliveInterval 30&quot; -o &quot;ServerAliveCountMax 3&quot; -R 0.0.0.0:3000:localhost:3000 -R 0.0.0.0:11434:localhost:11434 root@xxxxx.xxx</span><br></pre></td></tr></table></figure><p>具体我另开一篇</p><h4 id="ollama-open-WebUI部署时外网访问没有模型"><a href="#ollama-open-WebUI部署时外网访问没有模型" class="headerlink" title="ollama+open WebUI部署时外网访问没有模型"></a>ollama+open WebUI部署时外网访问没有模型</h4><p><img src="http://kunrea.top/blog/IMG_9F1A295273B7-1.jpeg"></p><p>这是因为在本地部署时，我们的ollama部署在localhost:11434端口，然后我们的openWebUI是从11434中读取模型。</p><p>但是我们的ssh反向映射到了linux上之后，openWebUI在云服务器上面访问localhost:11434,也就是访问我们本地的这个端口，在这个过程里出问题了。</p><p>我们使用<code>lsof -i :11434</code> 发现是<code>localhost:11434</code>或者<code>127.0.0.1:11434</code>也就是说云服务器访问本机的时候失败了。</p><p>我们查看<a href="https://github.com/ollama/ollama/blob/main/docs/faq.md">ollama文档</a>可以看到设置服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl setenv OLLAMA_HOST &quot;0.0.0.0:11434&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> linux </tag>
            
            <tag> AI </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS显示文件已损坏，但是在隐私设置里没有信任的方法</title>
      <link href="/2025/03/13/macOS%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%EF%BC%8C%E4%BD%86%E6%98%AF%E5%9C%A8%E9%9A%90%E7%A7%81%E8%AE%BE%E7%BD%AE%E9%87%8C%E6%B2%A1%E6%9C%89%E4%BF%A1%E4%BB%BB%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2025/03/13/macOS%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%EF%BC%8C%E4%BD%86%E6%98%AF%E5%9C%A8%E9%9A%90%E7%A7%81%E8%AE%BE%E7%BD%AE%E9%87%8C%E6%B2%A1%E6%9C%89%E4%BF%A1%E4%BB%BB%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>很多时候 macOS 从网上下载的应用打开时会显示</p><p><img src="http://kunrea.top/blog/20250313100802013.png"></p><p>这是因为在 macos 的<code>允许以下来源的应用程序</code>设置的原因</p><p><img src="http://kunrea.top/blog/20250313101028879.png"></p><p>我们可以使用以下命令</p><p><code>sudo spctl --master-disable </code></p><p>随后在这设置<code>所有来源</code></p><p><strong>但是，更新之后可能会显示</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> spctl --master-disable</span></span><br><span class="line">Password: Globally disabling the assessment system needs to be confirmed in System Settings.</span><br></pre></td></tr></table></figure><p>我们可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> xattr -r -d com.apple.quarantine 应用路径</span></span><br></pre></td></tr></table></figure><p>就可以使用了</p>]]></content>
      
      
      <categories>
          
          <category> MAC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>超好用的工具Picgo配合Github白嫖图床</title>
      <link href="/2025/03/13/%E4%BD%BF%E7%94%A8picgo%E7%94%A8github%E9%83%A8%E7%BD%B2%E5%9B%BE%E5%BA%8A/"/>
      <url>/2025/03/13/%E4%BD%BF%E7%94%A8picgo%E7%94%A8github%E9%83%A8%E7%BD%B2%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>无论是写博客还是开发一些东西，图片的存储都是一个小问题。<br>本地存储+相对路径是一个方法，但是部署到服务器上的存储空间占用大大增加，尤其是要迁移文件时，如果相对路径没弄好，就清一色的 🙅 了<br><img src="http://kunrea.top/blog/20250313102837699.png"><br>所以使用一个远程图床就很有必要了<br>现在比如阿里云 oss、腾讯云 cos、七牛云、又拍云。<br>但是这些国内平台对图片内容审查比较严格，容易图片丢失，所以我们还是推荐使用 github.</p><h4 id="1-PicGo-安装"><a href="#1-PicGo-安装" class="headerlink" title="1.PicGo 安装"></a>1.PicGo 安装</h4><p><a href="https://github.com/Molunerfinn/PicGo">PicGo</a>是一个<strong>一个用于快速上传图片并获取图片 URL 链接的工具</strong>，目前有 windows 和 macOS 版本。</p><span id="more"></span><p>支持下列图床（2025.3.13）</p><ul><li><code>七牛图床</code> v1.0</li><li><code>腾讯云 COS v4\v5 版本</code> v1.1 &amp; v1.5.0</li><li><code>又拍云</code> v1.2.0</li><li><code>GitHub</code> v1.5.0</li><li><code>SM.MS V2</code> v2.3.0-beta.0</li><li><code>阿里云 OSS</code> v1.6.0</li><li><code>Imgur</code></li></ul><p>macOS 使用 homebrew 安装 picgo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install picgo --cask</span><br></pre></td></tr></table></figure><p>安装后打开</p><p><img src="http://kunrea.top/blog/20250313103926156.png"></p><p>我们可以在这里设置图床</p><p><img src="http://kunrea.top/blog/20250313104023020.png"></p><p><strong>我觉得最好用的一点是，能直接从剪切板上传，也就是截完图直接上传而不需要在本地创建图片。</strong></p><h4 id="2-Github-token"><a href="#2-Github-token" class="headerlink" title="2.Github token"></a>2.Github token</h4><p><img src="http://kunrea.top/blog/20250313104247571.png"></p><p>首先，我们在 github 上创建一个 public 仓库</p><p><img src="http://kunrea.top/blog/20250313104331409.png"></p><p>然后我们在 settings 里面设置</p><p><img src="http://kunrea.top/blog/20250313104454992.png"></p><p><img src="http://kunrea.top/blog/20250313104515502.png"></p><p>然后我们把 token 填进来就可以使用了</p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
